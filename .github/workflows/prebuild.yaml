# Triggering prebuilds:
# 1. Create a draft release manually using the GitHub UI.
# 2. Set the `jobs.*.strategy.matrix.node` arrays to the set of Node.js versions
#    to build for.
# 3. Set the `jobs.*.strategy.matrix.tag` arrays to the set of releases
#    tags to build.
# 4. Commit and push this file to master.
# 5. In the Actions tab, navigate to the "Make Prebuilds" workflow and click
#    "Run workflow".
# 6. Once the builds succeed, promote the draft release to a full release.

name: Make Prebuilds
on: workflow_dispatch

jobs:
  Linux:
    strategy:
      matrix:
        node: [18, 20, 22, 24]
        tag: ["v4.9.0"]
    name: ${{ matrix.tag }}, Node.js ${{ matrix.node }}, Linux
    runs-on: ubuntu-latest
    env:
      BUILD_TAG: ${{ matrix.tag }}
      UV_USE_IO_URING: 0
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Build
        run: |
          npm install -g node-gyp
          npm install --ignore-scripts
          node-gyp rebuild

      - name: Test binary
        run: npm run test
      
      - name: Tarball
        id: tarball
        run: ./tarball.sh

      - name: Upload
        uses: actions/github-script@0.9.0
        with:
          script: |
            const fs = require("fs");
            const assetName = "${{ steps.tarball.outputs.asset_name }}";
            const tagName = process.env.BUILD_TAG;
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");

            const releases = await github.repos.listReleases({ owner, repo });
            const release = releases.data.find(r => r.tag_name === tagName);
            if (!release) {
              throw new Error(`Tag ${tagName} not found. Did you make the GitHub release?`);
            }

            const oldAsset = release.assets.find(a => a.name === assetName);
            if (oldAsset) {
              await github.repos.deleteReleaseAsset({ owner, repo, asset_id: oldAsset.id });
            }

            await github.repos.uploadReleaseAsset({
              url: release.upload_url,
              headers: {
                "content-type": "application/x-gzip",
                "content-length": `${fs.statSync(assetName).size}`
              },
              name: assetName,
              data: fs.readFileSync(assetName)
            });

  MacOS:
    strategy:
      matrix:
        node: [18, 20, 22, 24]
        tag: ["v4.9.0"]
    name: ${{ matrix.tag }}, Node.js ${{ matrix.node }}, MacOS
    runs-on: macos-13
    env:
      BUILD_TAG: ${{ matrix.tag }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Build
        run: |
          npm install -g node-gyp
          npm install --ignore-scripts
          node-gyp rebuild

      - name: Test binary
        run: npm run test

      - name: Tarball
        id: tarball
        run: ./tarball.sh

      - name: Upload
        uses: actions/github-script@0.9.0
        with:
          script: |
            const fs = require("fs");
            const assetName = "${{ steps.tarball.outputs.asset_name }}";
            const tagName = process.env.BUILD_TAG;
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");

            const releases = await github.repos.listReleases({ owner, repo });
            const release = releases.data.find(r => r.tag_name === tagName);
            if (!release) {
              throw new Error(`Tag ${tagName} not found. Did you make the GitHub release?`);
            }

            const oldAsset = release.assets.find(a => a.name === assetName);
            if (oldAsset) {
              await github.repos.deleteReleaseAsset({ owner, repo, asset_id: oldAsset.id });
            }

            await github.repos.uploadReleaseAsset({
              url: release.upload_url,
              headers: {
                "content-type": "application/x-gzip",
                "content-length": `${fs.statSync(assetName).size}`
              },
              name: assetName,
              data: fs.readFileSync(assetName)
            });

  Win:
    strategy:
      matrix:
        node: [18, 20, 22, 24]
        tag: ["v4.9.0"]
    name: ${{ matrix.tag }}, Node.js ${{ matrix.node }}, Windows
    runs-on: windows-latest
    env:
      BUILD_TAG: ${{ matrix.tag }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          path-type: inherit

      - name: Build
        run: |
          npm install -g node-gyp
          npm install --ignore-scripts
          node-gyp rebuild

      - name: Test binary
        run: npm run test

      - name: Tarball
        id: tarball
        shell: msys2 {0}
        run: ./tarball.sh

      - name: Upload
        uses: actions/github-script@0.9.0
        with:
          script: |
            const fs = require("fs");
            const assetName = "${{ steps.tarball.outputs.asset_name }}";
            const tagName = process.env.BUILD_TAG;
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");

            const releases = await github.repos.listReleases({ owner, repo });
            const release = releases.data.find(r => r.tag_name === tagName);
            if (!release) {
              throw new Error(`Tag ${tagName} not found. Did you make the GitHub release?`);
            }

            const oldAsset = release.assets.find(a => a.name === assetName);
            if (oldAsset) {
              await github.repos.deleteReleaseAsset({ owner, repo, asset_id: oldAsset.id });
            }

            await github.repos.uploadReleaseAsset({
              url: release.upload_url,
              headers: {
                "content-type": "application/x-gzip",
                "content-length": `${fs.statSync(assetName).size}`
              },
              name: assetName,
              data: fs.readFileSync(assetName)
            });
